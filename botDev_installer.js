/*global require*/
/*global console*/
/*global process*/

var filename = __filename;

var exec = require("child_process").exec;
var fs = require("fs");

function deleteFile() {
	"use strict";
	
	console.log("Installation complete! Deleting " + filename);
	
	fs.unlink(filename, function (err) {
		if (err) {
			console.log(err);
			
			return;
		}
		
		console.log("Successfully deleted " + filename + ". Goodbye!");
		
		process.exit(0);
	});
}

function install_botDev() {
	"use strict";
	
	console.log("Installing botDev.js...");
	
	var str = "/*\n\n	\n\n	Code by HenryTurkeyBrain\n\n	\n\n	http://www.henryturkeybrain.com\n\n	https://www.youtube.com/c/HenryTurkeyBrain\n\n	\n\n	If you use this in your bot(s), please credit me!\n\n*/\n\n\n\n/*global require*/\n\n/*global console*/\n\n/*global process*/\n\n/*global module*/\n\n/*global Promise*/\n\n\n\nvar version = {\n\n	\"discord-js\": \"11.1.0\",\n\n	\"botDev.js\": \"2.2.1\"\n\n};\n\n\n\nvar Discord = require(\"discord.js\");\n\n\n\nvar crypto = require(\"crypto\");\n\n\n\nvar fs = require(\"fs\");\n\n\n\nvar express = require(\"express\");\n\n\n\nvar app = express();\n\n\n\nfunction randomNum(a, b) {\n\n	\"use strict\";\n\n	return a + Math.round(Math.random() * (b - a));\n\n}\n\n\n\nfunction isPrime(x) {\n\n	\"use strict\";\n\n	var i;\n\n	for (i = 2; i <= Math.sqrt(x); i += ((i === 2) ? 1 : 2)) {\n\n		if (x % i === 0) {\n\n			return false;\n\n		}\n\n	}\n\n	\n\n	return true;\n\n}\n\n\n\nfunction gcd(a, b) {\n\n	\"use strict\";\n\n	var c;\n\n	while (b !== 0) {\n\n		c = b;\n\n		b = a % b;\n\n		a = c;\n\n	}\n\n	return a;\n\n}\n\n\n\n\n\n\n\nfunction hash(str, algorithm, encoding) {\n\n	\"use strict\";\n\n	\n\n	algorithm = (algorithm !== undefined) ? algorithm : \"sha512\";\n\n	encoding = (encoding !== undefined) ? encoding : \"hex\";\n\n	\n\n	var digest = crypto.createHash(algorithm);\n\n	return digest.update(str).digest(encoding);\n\n}\n\n\n\n\n\n// use 256 bits to avoid higher bit key attacks\n\n\n\nfunction encrypt(str, key) {\n\n	\"use strict\";\n\n	\n\n	var AES = crypto.createCipher(\"aes-256-ctr\", key);\n\n	return AES.update(str, \"utf8\", \"hex\") + AES.final(\"hex\");\n\n}\n\n\n\n// use 256 bits to avoid higher bit key attacks\n\n\n\nfunction decrypt(str, key) {\n\n	\"use strict\";\n\n	\n\n	var AES = crypto.createDecipher(\"aes-256-ctr\", key);\n\n	return AES.update(str, \"hex\", \"utf8\") + AES.final(\"utf8\");\n\n}\n\n\n\nfunction Bot(token) {\n\n	\"use strict\";\n\n	\n\n	var bot = new Discord.Client({\n\n		token: token,\n\n		autorun: true\n\n	}), Commands = {}, masterPassword, passwords = {}, servers = {}, defaultPerms, queue = {}, callbacks = {}, auth, port, server, socketio, io, config = {}, content, i, prop, val;\n\n	\n\n	try {\n\n		content = fs.readFileSync(\"./config.txt\", \"utf8\");\n\n	} catch (err) {\n\n		if (err && err.code === \"ENOENT\") {\n\n			console.log(\"Unable to find config.txt\");\n\n		}\n\n		\n\n		if (err && err.code !== \"ENOENT\") {\n\n			console.log(\"Unable to read config.txt\");\n\n		}\n\n		process.exit(0);\n\n	}\n\n	\n\n	content = content.split(\"\\n\").join(\"\\r\").split(\"\\r\").filter(function (line) {\n\n		return !(line === \"\" || line.startsWith(\"#\"));\n\n	});\n\n	\n\n	for (i = 0; i < content.length; i += 1) {\n\n		content[i] = content[i].split(\" = \");\n\n		prop = content[i].splice(0, 1);\n\n		val = JSON.parse(content[i].join(\" \"));\n\n		\n\n		config[prop] = val;\n\n	}\n\n	\n\n	if (config.owner === \"owner\") {\n\n		console.log(\"Please configure the bot's onwer in config.txt file to make it your discord ID\");\n\n	}\n\n	\n\n	auth = {\n\n		msg: {\n\n			status: false,\n\n			enforce: false,\n\n			override: false\n\n		}\n\n	};\n\n	\n\n	this.hash = hash;\n\n	\n\n	masterPassword = \"\";\n\n	\n\n	function generatePassword(usage) {\n\n		passwords[usage] = hash(masterPassword + token + usage, config[\"password.hash\"], config[\"password.encoding\"]);\n\n		\n\n		while (passwords[usage].length < config[\"password.final.length\"]) {\n\n			passwords[usage] += hash(masterPassword + token + usage + passwords[usage], config[\"password.hash\"], config[\"password.encoding\"]);\n\n		}\n\n		\n\n		passwords[usage] = passwords[usage].substr(0, config[\"password.final.length\"]);\n\n	}\n\n	\n\n	this.generatePassword = generatePassword;\n\n	\n\n	crypto.randomBytes(config[\"password.master.bytes\"], function (err, buf) {\n\n		if (err) {\n\n			callbacks.onerror(err);\n\n			\n\n			process.exit(0);\n\n		}\n\n		\n\n		masterPassword = buf.toString(config[\"password.encoding\"]);\n\n		\n\n		generatePassword(\"crash\");\n\n	});\n\n	\n\n	\n\n	\n\n	function updateAccount(user, guildID) {\n\n		var acc = servers[guildID].users[user.id];\n\n		\n\n		if (!servers[guildID].users[user.id]) {\n\n			servers[guildID].users[user.id] = {};\n\n		}\n\n		\n\n		servers[guildID].users[user.id].perms = (acc) ? acc.perms : [\"DEFAULT_PERMS\"];\n\n		\n\n		if (config[\"storage.users.avatar\"]) {\n\n			servers[guildID].users[user.id].avatar = user.avatar;\n\n		}\n\n		\n\n		if (config[\"storage.users.avatar.url\"]) {\n\n			servers[guildID].users[user.id].avatarImg = user.displayAvatarURL;\n\n		}\n\n		\n\n		if (config[\"storage.users.username\"]) {\n\n			servers[guildID].users[user.id].username = user.username;\n\n		}\n\n		\n\n		if (config[\"storage.users.disc\"]) {\n\n			servers[guildID].users[user.id].disc = user.discriminator;\n\n		}\n\n		\n\n		if (config[\"storage.users.bot\"]) {\n\n			servers[guildID].users[user.id].bot = user.bot;\n\n		}\n\n		\n\n		if (config[\"storage.users.uptime\"]) {\n\n			servers[guildID].users[user.id].uptime = user.client.uptime;\n\n		}\n\n		\n\n		if (config[\"storage.users.status\"]) {\n\n			servers[guildID].users[user.id].status = user.client.status;\n\n		}\n\n		\n\n		servers[guildID].users[user.id].version = version[\"botDev.js\"];\n\n		\n\n		/*	bot: user.bot,\n\n			uptime: user.client.uptime,\n\n			status: user.client.status,\n\n			email: user.email,\n\n			verified: user.verified,\n\n			browser: user.browser*/\n\n		\n\n		return new Promise(function (resolve, reject) {\n\n			fs.writeFile(\"/Servers/\" + guildID + \"/users.json\", JSON.stringify(servers[guildID].users, null, 4), \"utf8\", function (err) {\n\n				if (err) {\n\n					callbacks.onerror(err);\n\n					\n\n					reject();\n\n					\n\n					return;\n\n				}\n\n				\n\n				resolve();\n\n			});\n\n		});\n\n		\n\n	}\n\n	\n\n	this.updateAccount = updateAccount;\n\n	\n\n	\n\n	\n\n	function getRawPerms(id, guildID) {\n\n		if (servers[guildID].users[id] !== undefined) {\n\n			return servers[guildID].users[id].perms;\n\n		} else {\n\n			bot.error(id + \" has no account\", guildID);\n\n			\n\n			return [\"DEFAULT_PERMS\"];\n\n		}\n\n	}\n\n	\n\n	this.getRawPerms = getRawPerms;\n\n	\n\n	\n\n	\n\n	function getPerms(id, guildID) {\n\n		var perms = [], rawperms = getRawPerms(id, guildID), i, k, perm;\n\n		for (i = 0; i < rawperms.length; i += 1) {\n\n			perm = rawperms[i].replace(\"~\", \"\");\n\n			if (perm === \"DEFAULT_PERMS\") {\n\n				for (k = 0; k < servers[guildID].defaultPerms.length; k += 1) {\n\n					perms.push(servers[guildID].defaultPerms[k]);\n\n				}\n\n			} else {\n\n				if (rawperms[i].startsWith(\"~\")) {\n\n					if (perms.indexOf(perm) > -1) {\n\n						perms.splice(perms.indexOf(perm), 1);\n\n					}\n\n				} else {\n\n					perms.push(perm);\n\n				}\n\n			}\n\n		}\n\n		\n\n		return perms;\n\n	}\n\n	\n\n	this.getPerms = getPerms;\n\n	\n\n	\n\n	\n\n	\n\n	\n\n	this.loadCommands = function (commands) {\n\n		var keys = Object.keys(commands), i;\n\n		\n\n		for (i = 0; i < keys.length; i += 1) {\n\n			if (keys[i].indexOf(\" \") > -1) {\n\n				console.log(\"Command \\\"\" + keys[i] + \"\\\" cannot have a space in its name.\");\n\n				\n\n				process.exit(0);\n\n			}\n\n			\n\n			Commands[keys[i].toLowerCase()] = commands[keys[i]];\n\n		}\n\n		\n\n		if (config[\"commands.help\"] && !Commands[config[\"commands.help.name\"]]) {\n\n			Commands[config[\"commands.help.name\"]] = {\n\n				help: \"[command]\",\n\n				purpose: \"Lists all commands\",\n\n				perms: [],\n\n				guild: false,\n\n				callback: function (msg, args) {\n\n					var i, keys = Object.keys(Commands), str = \"\", perms, channel = (config[\"commands.help.channel\"] === 0) ? msg.author : msg.channel, embed = {};\n\n					\n\n					if (config[\"commands.help.embed\"]) {\n\n						if (config[\"commands.help.embed.author\"]) {\n\n							embed.author = {};\n\n							embed.author.name = config[\"commands.help.embed.author.author\"].replace(\"<BOT NAME>\", bot.user.username).replace(\"<OWNER>\", config.owner);\n\n							\n\n							if (config[\"commands.help.embed.author.icon\"]) {\n\n								embed.author.icon_url = config[\"commands.help.embed.author.icon.icon\"].replace(\"<BOT PROFILE PICTURE>\", bot.user.avatarURL);\n\n							}\n\n						}\n\n						\n\n						if (config[\"commands.help.embed.title\"]) {\n\n							embed.title = config[\"commands.help.embed.title.title\"];\n\n						}\n\n						\n\n						if (config[\"commands.help.embed.url\"]) {\n\n							embed.url = config[\"commands.help.embed.url.url\"];\n\n						}\n\n						\n\n						if (config[\"commands.help.embed.timestamp\"]) {\n\n							embed.timestamp = new Date();//config[\"commands.help.embed.timestamp.timestamp\"].replace(\"<TIME>\", new Date());\n\n						}\n\n						\n\n						if (config[\"commands.help.embed.footer\"]) {\n\n							embed.footer = {};\n\n							\n\n							embed.footer.text = config[\"commands.help.embed.footer.text\"].replace(\"<BOT NAME>\", bot.user.username).replace(\"<OWNER>\", config.owner);\n\n							\n\n							if (config[\"commands.help.embed.footer.icon\"]) {\n\n								embed.footer.icon_url = config[\"commands.help.embed.footer.icon.icon\"].replace(\"<BOT PROFILE PICTURE>\", bot.user.avatarURL);\n\n							}\n\n						}\n\n						\n\n						embed.color = parseInt(config[\"commands.help.embed.color\"].replace(\"#\", \"\"), 16);\n\n						\n\n						\n\n						if (args[0] && Commands[args[0].toLowerCase()] !== undefined) {\n\n							perms = Commands[args[0].toLowerCase()].perms;\n\n							\n\n							embed.fields = [{\n\n								name: args[0].toLowerCase(),\n\n								value: config[\"commands.help.format.single\"].split(\"<PREFIX>\").join(config[\"commands.exe.prefix\"]).split(\"<COMMAND>\").join(args[0].toLowerCase()).split(\"<SUFFIX>\").join(config[\"commands.exe.suffix\"]).split(\"<PURPOSE>\").join(Commands[args[0].toLowerCase()].purpose).split(\"<HELP>\").join(Commands[args[0].toLowerCase()].help).split(\"<PERMS>\").join((perms.length > 0) ? perms.join(\", \") : \"none\")\n\n							}];\n\n						} else {\n\n							embed.fields = [];\n\n							\n\n							for (i = 0; i < keys.length; i += 1) {\n\n								perms = Commands[keys[i]].perms;\n\n								\n\n								embed.fields.push({\n\n									name: keys[i].toLowerCase(),\n\n									value: config[\"commands.help.format.multiple\"].split(\"<PREFIX>\").join(config[\"commands.exe.prefix\"]).split(\"<COMMAND>\").join(keys[i].toLowerCase()).split(\"<SUFFIX>\").join(config[\"commands.exe.suffix\"]).split(\"<PURPOSE>\").join(Commands[keys[i]].purpose).split(\"<HELP>\").join(Commands[keys[i]].help).split(\"<PERMS>\").join((perms.length > 0) ? perms.join(\", \") : \"none\")\n\n								});\n\n							}\n\n						}\n\n						\n\n						channel.send({\n\n							embed: embed\n\n						}).then(function (message) {\n\n							if (config[\"commands.help.channel\"] === 0) {\n\n								msg.channel.send(config[\"commands.help.channel.msg\"].replace(\"<USER>\", msg.author));\n\n							}\n\n						});\n\n					} else {\n\n						if (args[0] && Commands[args[0].toLowerCase()] !== undefined) {\n\n							perms = Commands[args[0].toLowerCase()].perms;\n\n							\n\n							str = config[\"commands.help.format.single\"].split(\"<PREFIX>\").join(config[\"commands.exe.prefix\"]).split(\"<COMMAND>\").join(args[0].toLowerCase()).split(\"<SUFFIX>\").join(config[\"commands.exe.suffix\"]).split(\"<PURPOSE>\").join(Commands[args[0].toLowerCase()].purpose).split(\"<HELP>\").join(Commands[args[0].toLowerCase()].help).split(\"<PERMS>\").join((perms.length > 0) ? perms.join(\", \") : \"none\");\n\n\n\n							bot.MSG(\"\\n\\n\" + str, channel, msg.author);\n\n\n\n							return;\n\n						}\n\n						// loops through all the commands\n\n						for (i = 0; i < keys.length; i += 1) {\n\n							perms = Commands[keys[i]].perms;\n\n							\n\n							str += config[\"commands.help.format.multiple\"].split(\"<PREFIX>\").join(config[\"commands.exe.prefix\"]).split(\"<COMMAND>\").join(keys[i].toLowerCase()).split(\"<SUFFIX>\").join(config[\"commands.exe.suffix\"]).split(\"<PURPOSE>\").join(Commands[keys[i]].purpose).split(\"<HELP>\").join(Commands[keys[i]].help).split(\"<PERMS>\").join((perms.length > 0) ? perms.join(\", \") : \"none\") + config[\"commands.help.join\"];\n\n						}\n\n						\n\n						bot.MSG(\"\\n\\n\" + str, msg.channel, msg.author);\n\n					}\n\n				}\n\n			};\n\n		}\n\n		\n\n		if (config[\"commands.ping\"]) {\n\n			Commands[config[\"commands.ping.name\"]] = {\n\n				help: [],\n\n				purpose: \"Test bot speed\",\n\n				perms: [],\n\n				guild: false,\n\n				callback: function (msg, args) {\n\n					var t1 = msg.createdAt, t2;\n\n					\n\n					if (config[\"commands.ping.client_ping\"]) {\n\n						msg.channel.send(\"Pong!\\n\\nAverage ping time: \" + Math.round(Math.pow(10, config[\"commands.ping.decimals\"]) * bot.ping) / Math.pow(10, config[\"commands.ping.decimals\"]));\n\n					} else {\n\n						msg.channel.send(\"Pong!\").then(function (msg) {\n\n							t2 = msg.createdAt;\n\n\n\n							msg.edit(\"Pong!\\n\\nTime to receive ping and send pong: \" + (t2 - t1) + \"ms\");\n\n						});\n\n					}\n\n					\n\n				}\n\n			};\n\n		}\n\n		\n\n		\n\n		if (config[\"commands.kill\"]) {\n\n			Commands[config[\"commands.kill.name\"]] = {\n\n				help: \"<password>\",\n\n				purpose: \"Crashes bot\",\n\n				perms: [],\n\n				guild: false,\n\n				callback: function (msg, args) {\n\n					if ((config[\"commands.kill.password\"] && args[0] === passwords.crash) || !config[\"commands.kill.password\"]) {\n\n						callbacks.crash(msg).then(function () {\n\n							process.exit(0);\n\n						}).catch(function (err) {\n\n							this.MSG(\"Unable to crash bot: ```\" + err + \"```\");\n\n						});\n\n					} else {\n\n						callbacks.crashfail(msg);\n\n					}\n\n				}\n\n			};\n\n		}\n\n		\n\n		\n\n		if (config[\"commands.account\"]) {\n\n			Commands[config[\"commands.account.name\"]] = {\n\n				help: \"\",\n\n				purpose: \"Access your account\",\n\n				perms: [],\n\n				guild: true,\n\n				callback: function (msg, args) {\n\n					var guildID = msg.channel.guild.id, acc = servers[guildID].users[msg.author.id];\n\n					if (args.length === 0) {\n\n						bot.MSG(\"Your account information on _**\" + msg.channel.guild.name + \"**_n\\n__**Permissions**__\\n - **\" + getPerms(msg.author.id, guildID).join(\"**\\n - **\") + \"**\", msg.author);\n\n					}\n\n				}\n\n			};\n\n		}\n\n		\n\n		\n\n		if (config[\"commands.perms\"]) {\n\n			Commands[config[\"commands.perms.name\"]] = {\n\n				help: \"add/remove/list <user>/DEFAULT (perm)\",\n\n				purpose: \"Manage permissions on the server\",\n\n				perms: [\"CAN_MANAGE_PERMISSIONS\"],\n\n				guild: true,\n\n				callback: function (msg, args) {\n\n					var method = args[0], user = args[1] || \"\", perm = args[2] || \"\", server = servers[msg.channel.guild.id], perms;\n\n\n\n					user = user.replace(\"<\", \"\").replace(\"!\", \"\").replace(\"@\", \"\").replace(\">\", \"\");\n\n\n\n					if (server.users[user] === undefined && user !== \"DEFAULT\") {\n\n						perm = args[1] || \"\";\n\n\n\n						user = msg.author.id;\n\n					}\n\n\n\n					if (method === \"list\") {\n\n						if (user !== \"DEFAULT\") {\n\n							perms = getPerms(user, msg.channel.guild.id);\n\n						} else {\n\n							perms = server.defaultPerms;\n\n						}\n\n\n\n						if (user === \"DEFAULT\") {\n\n							bot.MSG(\"Here are this server's default perms: ```JavaScript\\n\\\"\" + perms.join(\"\\\", \\\"\") + \"\\\"```\", msg.channel, msg.author);\n\n						} else {\n\n							bot.MSG(\"Here are <@\" + user + \">'s perms: ```JavaScript\\n\\\"\" + perms.join(\"\\\", \\\"\") + \"\\\"```\", msg.channel, msg.author);\n\n						}\n\n					}\n\n\n\n					if (method === \"add\") {\n\n						perms = getPerms(msg.author.id, msg.channel.guild.id);\n\n\n\n						if (perms.indexOf(perm) === -1 && perms.indexOf(\"OP\") === -1) {\n\n							bot.MSG(\"You can't add a permission that you don't have!\", msg.channel, msg.author);\n\n\n\n							return;\n\n						}\n\n\n\n						if (user !== \"DEFAULT\") {\n\n							if (server.users[user].perms.indexOf(perm) === -1) {\n\n								server.users[user].perms.push(perm);\n\n\n\n								servers[msg.channel.guild.id] = server;\n\n\n\n								bot.fetchUser(user).then(function (userObj) {\n\n									updateAccount(userObj, msg.channel.guild.id);\n\n\n\n									bot.MSG(\"Added permission ```JavaScript\\n\\\"\" + perm + \"\\\"``` to <@\" + user + \">\", msg.channel, msg.author);\n\n								}).catch(function (err) {\n\n									throw new Error(err);\n\n								});\n\n							} else {\n\n								bot.MSG(\"<@\" + user + \"> already has permission ```JavaScript\\n\\\"\" + perm + \"\\\"```\", msg.channel, msg.author);\n\n							}\n\n						} else {\n\n							if (server.defaultPerms.indexOf(perm) === -1) {\n\n								server.defaultPerms.push(perm);\n\n\n\n								fs.writeFile(\"./Servers/\" + msg.channel.guild.id + \"/defaultPerms.txt\", server.defaultPerms, function (err) {\n\n									if (err) {\n\n										callbacks.onerror(err);\n\n\n\n										return;\n\n									}\n\n\n\n									bot.MSG(\"Permission ```JavaScript\\n\\\"\" + perm + \"\\\"``` has been added to this server's default perms\", msg.channel, msg.author);\n\n								});\n\n							} else {\n\n								bot.MSG(\"This server's default perms already include ```JavaScript\\n\\\"\" + perm + \"\\\"```\", msg.channel, msg.author);\n\n							}\n\n						}\n\n					}\n\n\n\n					if (method === \"remove\") {\n\n						perms = getPerms(msg.author.id, msg.channel.guild.id);\n\n\n\n						if (perms.indexOf(perm) === -1 && perms.indexOf(\"OP\") === -1) {\n\n							bot.MSG(\"You can't remove a permission that you don't have!\", msg.channel, msg.author);\n\n\n\n							return;\n\n						}\n\n\n\n\n\n						if (user !== \"DEFAULT\") {\n\n							perms = getPerms(user, msg.channel.guild.id);\n\n\n\n							if (perms.indexOf(perm) > -1) {\n\n								if (server.users[user].perms.indexOf(perm) > -1) {\n\n									server.users[user].perms.splice(server.users[user].perms.indexOf(perm));\n\n								} else {\n\n									server.users[user].perms.push(\"~\" + perm);\n\n								}\n\n\n\n								servers[msg.channel.guild.id] = server;\n\n\n\n								bot.fetchUser(user).then(function (userObj) {\n\n									updateAccount(userObj, msg.channel.guild.id);\n\n\n\n									bot.MSG(\"Removed permission ```JavaScript\\n\\\"\" + perm + \"\\\"``` from <@\" + user + \">\", msg.channel, msg.author);\n\n								}).catch(function (err) {\n\n									throw new Error(err);\n\n								});\n\n\n\n							} else {\n\n								bot.MSG(\"<@\" + user + \"> doesn't have permission ```JavaScript\\n\\\"\" + perm + \"\\\"```\", msg.channel, msg.author);\n\n							}\n\n						} else {\n\n							if (server.defaultPerms.indexOf(perm) > -1) {\n\n								server.defaultPerms.splice(server.defaultPerms.indexOf(perm));\n\n\n\n								fs.writeFile(\"./Servers/\" + msg.channel.guild.id + \"/defaultPerms.txt\", server.defaultPerms, function (err) {\n\n									if (err) {\n\n										callbacks.onerror(err);\n\n\n\n										return;\n\n									}\n\n\n\n									bot.MSG(\"Permission ```JavaScript\\n\\\"\" + perm + \"\\\"``` has been removed from this server's default perms\", msg.channel, msg.author);\n\n								});\n\n							} else {\n\n								bot.MSG(\"This server's default perms don't have ```JavaScript\\n\\\"\" + perm + \"\\\"```\", msg.channel, msg.author);\n\n							}\n\n						}\n\n					}\n\n				}\n\n			};\n\n		}\n\n	};\n\n	\n\n	callbacks = {\n\n		crash: function (msg) {\n\n			bot.info(\"Goodbye, cruel world\");\n\n			\n\n			return new Promise(function (resolve, reject) {\n\n				resolve();\n\n			});\n\n		},\n\n		\n\n		crashfail: function (msg) {\n\n			bot.MSG(\"Wrong password\", msg.channel, msg.author);\n\n		},\n\n		\n\n		error: function (err) {\n\n			bot.error(err);\n\n		},\n\n		onerror: function (err) {\n\n			if (err) {\n\n				callbacks.error(err);\n\n			}\n\n		},\n\n		\n\n		guildCreate: function (guild) {\n\n			servers[guild.id] = {};\n\n			\n\n			fs.mkdir(\"/Servers/\" + guild.id, function (err) {\n\n				fs.stat(\"/Servers/\" + guild.id + \"/users.json\", function (err, stat) {\n\n					if (err) {\n\n						if (err.code === \"ENOENT\") {\n\n							fs.writeFile(\"/Servers/\" + guild.id + \"/users.json\", \"{}\");\n\n							servers[guild.id].users = {};\n\n						} else {\n\n							callbacks.onerror(err);\n\n						}\n\n					} else {\n\n						fs.readFile(\"/Servers/\" + guild.id + \"/users.json\", \"utf8\", function (err, content) {\n\n							if (err) {\n\n								callbacks.onerror(err);\n\n\n\n								process.exit(0);\n\n							}\n\n\n\n							servers[guild.id].users = JSON.parse(content);\n\n						});\n\n					}\n\n				});\n\n\n\n				fs.stat(\"/Servers/\" + guild.id + \"/defaultPerms.txt\", function (err, stat) {\n\n					if (err) {\n\n						if (err.code === \"ENOENT\") {\n\n							fs.readFile(bot.user.id + \"/defaultPerms.txt\", \"utf8\", function (err, content) {\n\n								if (err) {\n\n									callbacks.onerror(err);\n\n\n\n									return;\n\n								}\n\n\n\n								fs.writeFile(\"/Servers/\" + guild.id + \"/defaultPerms.txt\", content);\n\n\n\n								servers[guild.id].defaultPerms = content.split(\",\").join(\" \").split(\" \").join(\" \").split(\" \");\n\n								while (servers[guild.id].defaultPerms.indexOf(\"\") > -1) {\n\n									servers[guild.id].defaultPerms.splice(servers[guild.id].defaultPerms.indexOf(\"\"), 1);\n\n								}\n\n							});\n\n						} else {\n\n							callbacks.onerror(err);\n\n						}\n\n					} else {\n\n						fs.readFile(\"/Servers/\" + guild.id + \"/defaultPerms.txt\", \"utf8\", function (err, content) {\n\n							if (err) {\n\n								callbacks.onerror(err);\n\n\n\n								process.exit(0);\n\n							}\n\n\n\n							servers[guild.id].defaultPerms = content.split(\",\").join(\" \").split(\" \").join(\" \").split(\" \");\n\n							while (servers[guild.id].defaultPerms.indexOf(\"\") > -1) {\n\n								servers[guild.id].defaultPerms.splice(servers[guild.id].defaultPerms.indexOf(\"\"), 1);\n\n							}\n\n						});\n\n					}\n\n				});\n\n\n\n				fs.stat(\"/Servers/\" + guild.id + \"/serverInfo.json\", function (err, stat) {\n\n					if (err) {\n\n						if (err.code === \"ENOENT\") {\n\n							var info = {\n\n								createdAt: guild.createdAt.toString(),\n\n								iconURL: guild.iconURL\n\n							};\n\n\n\n							fs.writeFile(\"/Servers/\" + guild.id + \"/serverInfo.json\", JSON.stringify(info, null, 4), function (err) {\n\n								callbacks.onerror(err);\n\n							});\n\n						} else {\n\n							callbacks.onerror(err);\n\n						}\n\n					}\n\n				});\n\n			});\n\n\n\n			guild.defaultChannel.send(config[\"server.bot_join\"].replace(\"<OWNER>\", guild.owner));\n\n		},\n\n		\n\n		customReady: function () {\n\n			\n\n		},\n\n		ready: function () {\n\n			bot.user.setGame(\"Discord | \" + config[\"commands.exe.prefix\"] + config[\"commands.help.name\"] + config[\"commands.exe.suffix\"]);\n\n			\n\n			var keys = Object.keys(passwords), i, proceed = new Promise(function (resolve, reject) {\n\n				bot.info(\"Checking for /\" + bot.user.id + \"/ ...\");\n\n				\n\n				fs.stat(bot.user.id, function (err, stat) {\n\n					if (err && err.code !== \"ENOENT\") {\n\n						bot.info(\"Unable to check for /\" + bot.user.id);\n\n						callbacks.onerror(err);\n\n						resolve();\n\n						\n\n						return;\n\n					}\n\n\n\n					if (err && err.code === \"ENOENT\") {\n\n						bot.info(\"Unable to find /\" + bot.user.id + \"/\");\n\n\n\n						bot.info(\"Creating /\" + bot.user.id + \"/\");\n\n\n\n						fs.mkdir(bot.user.id, function (err) {\n\n							if (err) {\n\n								bot.info(\"Unable to create /\" + bot.user.id + \"/\");\n\n								callbacks.onerror(err);\n\n								resolve();\n\n								\n\n								return;\n\n							}\n\n							\n\n							resolve();\n\n						});\n\n					}\n\n					\n\n					resolve();\n\n				});\n\n			});\n\n			\n\n			proceed.then(function () {\n\n				var proceed2 = new Promise(function (resolve, reject) {\n\n					bot.info(\"Checking for /Servers/\");\n\n					\n\n					fs.stat(\"/Servers/\", function (err, stat) {\n\n						if (err && err.code !== \"ENOENT\") {\n\n							bot.info(\"Unable to check for /\" + bot.user.id);\n\n							callbacks.onerror(err);\n\n							resolve();\n\n						}\n\n						\n\n						if (err && err.code === \"ENOENT\") {\n\n							bot.info(\"Unable to find /Servers/\");\n\n\n\n							bot.info(\"Creating /Servers/...\");\n\n\n\n							fs.mkdir(\"/Servers/\", function (err) {\n\n								if (err) {\n\n									bot.info(\"Unable to create /\" + bot.user.id + \"/\");\n\n									callbacks.onerror(err);\n\n									resolve();\n\n\n\n									return;\n\n								}\n\n\n\n								resolve();\n\n							});\n\n						}\n\n						\n\n						resolve();\n\n					});\n\n				});\n\n				\n\n				proceed2.then(function () {\n\n					fs.readdir(\"/Servers/\", function (err, files) {\n\n						if (err) {\n\n							callbacks.onerror(err);\n\n							\n\n							return;\n\n						}\n\n						\n\n						var i, read = function (x) {\n\n							return new Promise(function (RESOLVE, REJECT) {\n\n								bot.info(\"Reading server \" + x + \"...\");\n\n								\n\n								var proceed3 = new Promise(function (resolve, reject) {\n\n									bot.info(\"Reading /Servers/\" + x + \"/users.json ...\");\n\n\n\n									fs.readFile(\"/Servers/\" + x + \"/users.json\", function (err, content) {\n\n										if (err && err.code !== \"ENOENT\") {\n\n											bot.info(\"Unable to read /Servers/\" + x + \"/users.json ...\");\n\n											callbacks.onerror(err);\n\n											resolve();\n\n\n\n											return;\n\n										}\n\n\n\n										if (err && err.code === \"ENOENT\") {\n\n											bot.info(\"Unable to find /Servers/\" + x + \"/users.json\");\n\n\n\n											bot.info(\"Writing /Servers/\" + x + \"/users.json ...\");\n\n											fs.writeFile(\"/Servers/\" + x + \"/users.json\", \"{}\", function (err) {\n\n												if (err) {\n\n													bot.info(\"Unable to write /Servers/\" + x + \"/users.json\");\n\n													callbacks.onerror(err);\n\n													resolve();\n\n\n\n													return;\n\n												}\n\n\n\n												bot.info(\"Successfully wrote Servers/\" + x + \"/users.json\");\n\n											});\n\n\n\n											servers[x].users = {};\n\n\n\n											return;\n\n										}\n\n										\n\n										try {\n\n											bot.info(\"Successfully stored user data for server \" + x);\n\n											servers[x].users = JSON.parse(content);\n\n\n\n											resolve();\n\n										} catch (e) {\n\n											bot.info(\"Error parsing /Servers/\" + x + \"/users.json, defaulting user data...\");\n\n											fs.writeFile(\"/Servers/\" + x + \"/users.json\", \"{}\", function (err) {\n\n												if (err) {\n\n													bot.info(\"Unable to write /Servers/\" + x + \"/users.json\");\n\n													callbacks.onerror(err);\n\n													resolve();\n\n\n\n													return;\n\n												}\n\n\n\n												bot.info(\"Successfully defaulted /Servers/\" + x + \"/users.json\");\n\n\n\n												resolve();\n\n											});\n\n\n\n											servers[x].users = {};\n\n										}\n\n									});\n\n								});\n\n\n\n								proceed3.then(function () {\n\n									var proceed4 = new Promise(function (resolve, reject) {\n\n										bot.info(\"Reading /Servers/\" + x + \"/defaultPerms.txt...\");\n\n\n\n										fs.readFile(\"/Servers/\" + x + \"/defaultPerms.txt\", function (err, content) {\n\n											if (err && err.code !== \"ENOENT\") {\n\n												bot.info(\"Unable to read /Servers/\" + x + \"/defaultPerms.txt\");\n\n												callbacks.onerror(err);\n\n												resolve();\n\n\n\n												return;\n\n											}\n\n											\n\n											if (err && err.code === \"ENOENT\") {\n\n												bot.info(\"Unable to find /Servers/\" + x + \"/defaultPerms.txt\");\n\n												\n\n												bot.info(\"Reading /\" + bot.user.id + \"/defaultPerms.txt ...\");\n\n												\n\n												fs.readFile(bot.user.id + \"/defaultPerms.txt\", \"utf8\", function (err, content2) {\n\n													if (err && err.code !== \"ENOENT\") {\n\n														bot.info(\"Unable to read /\" + bot.user.id + \"/defaultPerms.txt\");\n\n														callbacks.onerror(err);\n\n														resolve();\n\n\n\n														return;\n\n													}\n\n													\n\n													if (err && err.code === \"ENOENT\") {\n\n														bot.info(\"Unable to find /\" + bot.user.id + \"/defaultPerms.txt, defaulting it...\");\n\n														\n\n														content2 = \"CAN_USE_BOT_COMMANDS, CAN_HAVE_SECURE_ACCOUNT_1\";\n\n														\n\n														fs.writeFile(bot.user.id + \"/defaultPerms.txt\", content, function (err) {\n\n															if (err) {\n\n																bot.info(\"Unable to write /\" + bot.user.id + \"/defaultPerms.txt\");\n\n																callbacks.onerror(err);\n\n																resolve();\n\n																\n\n																return;\n\n															}\n\n															\n\n															bot.info(\"Successfully defaulted /\" + bot.user.id + \"/defaultPerms.txt\");\n\n														});\n\n														\n\n													}\n\n													\n\n													content = content2;\n\n													\n\n													bot.info(\"Writing /Servers/\" + x + \"/defaultPerms.txt ...\");\n\n													\n\n													fs.writeFile(\"/Servers/\" + x + \"/defaultPerms.txt\", function (err) {\n\n														if (err) {\n\n															bot.info(\"Unable to write /Servers/\" + x + \"/defaultPerms.txt\");\n\n															callbacks.onerror(err);\n\n															resolve();\n\n															\n\n															return;\n\n														}\n\n														\n\n														bot.info(\"Successfully wrote /Servers/\" + x + \"/defaultPerms.txt ...\");\n\n													});\n\n												});\n\n											}\n\n\n\n											content = String(content);\n\n											servers[x].defaultPerms = content.split(\",\").join(\" \").split(\" \").join(\" \").split(\" \");\n\n											while (servers[x].defaultPerms.indexOf(\"\") > -1) {\n\n												servers[x].defaultPerms.splice(servers[x].defaultPerms.indexOf(\"\"), 1);\n\n											}\n\n											\n\n											resolve();\n\n										});\n\n									});\n\n									\n\n									proceed4.then(function () {\n\n										RESOLVE();\n\n									});\n\n								});\n\n							});\n\n						};\n\n						\n\n						function next(i) {\n\n							var promise;\n\n							\n\n							if (i === files.length) {\n\n								bot.info(\"Checking for /\" + bot.user.id + \"/defaultPerms.txt ...\");\n\n								\n\n								promise = new Promise(function (resolve, reject) {\n\n									fs.stat(bot.user.id + \"/defaultPerms.txt\", function (err, stat) {\n\n										if (err) {\n\n											if (err.code === \"ENOENT\") {\n\n												bot.info(\"Unable to find /\" + bot.user.id + \"/defaultPerms.txt ...\");\n\n												bot.info(\"Defaulting /\" + bot.user.id + \"/defaultPerms.txt ...\");\n\n												fs.writeFile(bot.user.id + \"/defaultPerms.txt\", \"CAN_USE_BOT_COMMANDS, CAN_HAVE_SECURE_ACCOUNT_1\", function (err) {\n\n													if (err) {\n\n														bot.info(\"Unable to write /\" + bot.user.id + \"/defaultPerms.txt\");\n\n														callbacks.onerror(err);\n\n														resolve();\n\n														\n\n														return;\n\n													}\n\n												});\n\n											} else {\n\n												bot.info(\"Unable to check /\" + bot.user.id + \"/defaultPerms.txt\");\n\n												callbacks.onerror(err);\n\n												resolve();\n\n											}\n\n										}\n\n										\n\n										bot.info(\"Found /\" + bot.user.id + \"/defaultPerms.txt\");\n\n										\n\n										resolve();\n\n									});\n\n								});\n\n								\n\n								promise.then(function () {\n\n									var proceed5 = new Promise(function (resolve, reject) {\n\n										bot.info(\"Checking for /\" + bot.user.id + \"/README.txt ...\");\n\n										\n\n										fs.stat(bot.user.id + \"/README.txt\", function (err, stat) {\n\n											if (err) {\n\n												if (err.code === \"ENOENT\") {\n\n													bot.info(\"Unable to find /\" + bot.user.id + \"/README.txt ...\");\n\n													bot.info(\"Defaulting /\" + bot.user.id + \"/README.txt ...\");\n\n													\n\n													fs.writeFile(bot.user.id + \"/README.txt\", \"This directory has essential files that if edited incorrectly could cause your bot to malfunction. Please only edit these files if you know what you are doing. ~ HenryTurkeyBrain\", function (err) {\n\n														if (err) {\n\n															bot.info(\"Unable to write /\" + bot.user.id + \"/README.txt\");\n\n															callbacks.onerror(err);\n\n															resolve();\n\n\n\n															return;\n\n														}\n\n													});\n\n												} else {\n\n													bot.info(\"Unable to check /\" + bot.user.id + \"/README.txt\");\n\n													callbacks.onerror(err);\n\n													resolve();\n\n												}\n\n											}\n\n											\n\n											bot.info(\"Found /\" + bot.user.id + \"/README.txt\");\n\n											\n\n											resolve();\n\n										});\n\n									});\n\n									\n\n									proceed5.then(function () {\n\n										bot.info(\"\\n\\n\\n\\n\\n\");\n\n										bot.info(\"MASTER PASSWORD : \" + masterPassword);\n\n										bot.info(\" * MASTER PASSWORD generates other passwords, keep this super secret.\");\n\n										bot.info(\" * Keep your bot's token secret. Given the token and MASTER PASSWORD, you can find any other passwords.\");\n\n										bot.info(\" * MASTER PASSWORD does not work as a substitute for other passwords, it just generates them.\");\n\n										bot.info(\" * Given a password, you cannot find MASTER PASSWORD or any other passwords.\");\n\n\n\n										fs.readFile(\"./version.json\", \"utf8\", function (err, content) {\n\n											if (err && err.code !== \"ENOENT\") {\n\n												callbacks.onerror(err);\n\n												process.exit(0);\n\n												return;\n\n											}\n\n\n\n											if (err && err.code === \"ENOENT\") {\n\n												fs.writeFile(\"./version.json\", JSON.stringify(version, null, 4), function (err) {\n\n													if (err) {\n\n														callbacks.onerror(err);\n\n														process.exit(0);\n\n														return;\n\n													}\n\n												});\n\n\n\n												return;\n\n											}\n\n\n\n											var version2 = JSON.parse(content);\n\n\n\n											if (version2[\"discord-js\"] !== version[\"discord-js\"]) {\n\n												bot.warn(\"botDev.js v\" + version[\"discord-js\"] + \".\" + version[\"botDev.js\"] + \" is uncompatible with discord-js v\" + version[\"discord-js\"]);\n\n\n\n												return;\n\n											}\n\n\n\n											if (version2[\"botDev.js\"] !== version[\"botDev.js\"]) {\n\n												bot.warn(\"Code for botDev.js v\" + version2[\"botDev.js\"] + \" may be uncompatible with code for botDev.js v\" + version[\"botDev.js\"] + \". Please update your code if your console says so.\");\n\n\n\n												version2[\"botDev.js\"] = version[\"botDev.js\"];\n\n\n\n												fs.writeFile(\"./version.json\", JSON.stringify(version2, null, 4), function (err) {\n\n													if (err) {\n\n														callbacks.onerror(err);\n\n														process.exit(0);\n\n														return;\n\n													}\n\n												});\n\n											}\n\n										});\n\n\n\n										for (i = 0; i < keys.length; i += 1) {\n\n											bot.info(keys[i].toUpperCase() + \" PASSWORD : \" + passwords[keys[i]]);\n\n										}\n\n\n\n										callbacks.customReady();\n\n\n\n										if (config.webconsole) {\n\n											if (config[\"webconsole.port\"] === -1) {\n\n												port = hash(token + bot.id, config[\"password.hash\"], config[\"password.encoding\"]);\n\n												\n\n												port = port.split(\"\").map(function (char) {\n\n													return config[\"webconsole.port.hash.add\"] + char.charCodeAt(0);\n\n												}).reduce(function (sum, val) {\n\n													return (sum + val) % (config[\"webconsole.port.max\"] - config[\"webconsole.port.min\"]);\n\n												}, 0) + config[\"webconsole.port.min\"];\n\n											} else {\n\n												port = config[\"webconsole.port\"];\n\n											}\n\n											\n\n											server = app.listen(port);\n\n\n\n											socketio = require(\"socket.io\");\n\n											io = socketio.listen(server);\n\n\n\n											app.get(\"*\", function (req, res) {\n\n												res.sendFile(__dirname + \"/console.html\");\n\n											});\n\n\n\n											io.sockets.on(\"connection\", function (socket) {\n\n												socket.emit(\"title\", bot.user.username + \" - botDev Web Console\");\n\n												socket.emit(\"icon\", \"https://cdn.discordapp.com/avatars/\" + bot.user.id + \"/\" + bot.user.avatar + \".png?size=16\");\n\n												socket.emit(\"list\", bot.console.lists);\n\n												var uptime = bot.uptime, d, h, m, s, ms;\n\n												d = Math.floor(uptime / 86400000);\n\n												h = Math.floor((uptime - 86400000 * d) / 3600000);\n\n												m = Math.floor((uptime - 86400000 * d - 3600000 * h) / 60000);\n\n												s = Math.floor((uptime - 86400000 * d - 3600000 * h - 60000 * m) / 1000);\n\n												ms = (uptime - 86400000 * d - 3600000 * h - 60000 * m) % 1000;\n\n\n\n												socket.emit(\"data\", {\n\n													avatar: \"<img src=\\\"https://cdn.discordapp.com/avatars/\" + bot.user.id + \"/\" + bot.user.avatar + \".png?size=64\\\">\",\n\n													name: bot.user.tag,\n\n													id: bot.user.id,\n\n													users: bot.users.size,\n\n													ping: Math.round(bot.ping * 100) / 100 + \"ms\",\n\n													token: bot.token,\n\n													uptime: bot.uptime + \"ms; \" + d + \" day\" + ((d === 1) ? \"\" : \"s\") + \", \" + h + \" hour\" + ((h === 1) ? \"\" : \"s\") + \", \" + m + \" minute\" + ((m === 1) ? \"\" : \"s\") + \", \" + s + \" second\" + ((s === 1) ? \"\" : \"s\") + \", \" + ms + \" millisecond\" + ((ms === 1) ? \"\" : \"s\"),\n\n													game: bot.user.presence.game.name,\n\n													status: bot.user.presence.status\n\n												});\n\n\n\n												socket.on(\"stop\", function () {\n\n													process.exit(0);\n\n												});\n\n\n\n												socket.on(\"beep\", function () {\n\n													var uptime = bot.uptime, d, h, m, s, ms;\n\n													d = Math.floor(uptime / 86400000);\n\n													h = Math.floor((uptime - 86400000 * d) / 3600000);\n\n													m = Math.floor((uptime - 86400000 * d - 3600000 * h) / 60000);\n\n													s = Math.floor((uptime - 86400000 * d - 3600000 * h - 60000 * m) / 1000);\n\n													ms = (uptime - 86400000 * d - 3600000 * h - 60000 * m) % 1000;\n\n													socket.emit(\"boop\", {\n\n														users: bot.users.size,\n\n														ping: Math.round(bot.ping * 100) / 100 + \"ms\",\n\n														uptime: bot.uptime + \"ms; \" + d + \" day\" + ((d === 1) ? \"\" : \"s\") + \", \" + h + \" hour\" + ((h === 1) ? \"\" : \"s\") + \", \" + m + \" minute\" + ((m === 1) ? \"\" : \"s\") + \", \" + s + \" second\" + ((s === 1) ? \"\" : \"s\") + \", \" + ms + \" millisecond\" + ((ms === 1) ? \"\" : \"s\"),\n\n														game: bot.user.presence.game.name,\n\n														status: bot.user.presence.status\n\n													});\n\n\n\n													socket.emit(\"list\", bot.console.lists);\n\n												});\n\n											});\n\n\n\n											console.log(\"Web console: http://localhost:\" + port);\n\n										}\n\n									});\n\n								});\n\n								\n\n								\n\n								\n\n								return;\n\n							}\n\n							\n\n							servers[files[i]] = {};\n\n							promise = read(files[i]);\n\n							promise.then(function () {\n\n								next(i + 1);\n\n							});\n\n						}\n\n						\n\n						next(0);\n\n					});\n\n				});\n\n			});\n\n		},\n\n		\n\n		customMessage: function () {\n\n			\n\n		},\n\n		message: function (msg) {\n\n			var args = msg.content.split(\" \"), command, perms, i, perm, s = true, missingPerms = [];\n\n			\n\n			\n\n			\n\n			if (msg.channel.guild) {\n\n				if (servers[msg.channel.guild.id] === undefined) {\n\n					callbacks.guildCreate(msg.channel.guild);\n\n					\n\n					return;\n\n				}\n\n				\n\n				updateAccount(msg.author, msg.channel.guild.id);\n\n\n\n				perms = getPerms(msg.author.id, msg.channel.guild.id);\n\n\n\n				if (msg.author.id === msg.channel.guild.owner.id || msg.author.id === config.owner) {\n\n					if (perms.indexOf(\"OP\") === -1) {\n\n						perms.push(\"OP\");\n\n\n\n						servers[msg.channel.guild.id].users[msg.author.id].perms.push(\"OP\");\n\n					}\n\n				}\n\n			}\n\n\n\n			// check prefix and suffix\n\n			if (args[0].startsWith(config[\"commands.exe.prefix\"]) && args[0].endsWith(config[\"commands.exe.suffix\"])) {\n\n				command = args.shift();\n\n				command = command.replace(config[\"commands.exe.prefix\"], \"\").replace(config[\"commands.exe.suffix\"], \"\");\n\n				\n\n				if (Commands[command.toLowerCase()] !== undefined) {\n\n					bot.command(msg.author.username + \"#\" + msg.author.discriminator + \" issued \" + msg.content);\n\n\n\n					// only check for perms if its a guild\n\n					if (msg.channel.guild) {\n\n						if (perms.indexOf(\"OP\") === -1) {\n\n							for (i = 0; i < Commands[command.toLowerCase()].perms.length; i += 1) {\n\n								perm = Commands[command.toLowerCase()].perms[i];\n\n								if (perms.indexOf(perm) === -1) {\n\n									s = false;\n\n									missingPerms.push(perm);\n\n								}\n\n							}\n\n\n\n							if (perms.indexOf(\"CAN_USE_BOT_COMMANDS\") === -1) {\n\n								s = false;\n\n								missingPerms.push(\"CAN_USE_BOT_COMMANDS\");\n\n							}\n\n						}\n\n					}\n\n\n\n					if (s) {\n\n						if (msg.channel.guild) {\n\n							if (queue[msg.channel.guild.id] === undefined) {\n\n								queue[msg.channel.guild.id] = [];\n\n\n\n								setInterval(function () {\n\n									if (queue[msg.channel.guild.id].length > 0) {\n\n										var c = queue[msg.channel.guild.id].shift();\n\n\n\n										try {\n\n											c.callback(c.msg, c.args, bot);\n\n										} catch (e) {\n\n											bot.MSG(\"An error occured :(\\n\\n``\" + e + \"``\", c.msg.channel, c.msg.author);\n\n											callbacks.onerror(e);\n\n										}\n\n									}\n\n								}, 200);\n\n							}\n\n							\n\n							if (command.toLowerCase() !== \"ping\") {\n\n								if (queue[msg.channel.guild.id].length < 5) {\n\n									queue[msg.channel.guild.id].push({\n\n										callback: Commands[command.toLowerCase()].callback,\n\n										msg: msg,\n\n										args: args\n\n									});\n\n								} else {\n\n									bot.MSG(\"Maximum command queue length exceeded. Please wait until I finish running other queued commands.\", msg.channel, msg.author);\n\n								}\n\n							} else {\n\n								Commands[command.toLowerCase()].callback(msg, args, bot);\n\n							}\n\n						} else {\n\n							if (!Commands[command.toLowerCase()].guild || Commands[command.toLowerCase()].guild === undefined) {\n\n								try {\n\n									Commands[command.toLowerCase()].callback(msg, args, bot);\n\n								} catch (e) {\n\n									bot.MSG(\"An error occured :(\\n\\n``\" + e + \"``\", msg.channel, msg.author);\n\n									callbacks.onerror(e);\n\n								}\n\n							} else {\n\n								bot.MSG(\"This command can only be used in servers.\", msg.channel, msg.author);\n\n							}\n\n						}\n\n					} else {\n\n						bot.MSG(\"You may not run this command because you are missing the following permission(s):\\n\\n```JavaScript\\n\\\"\" + missingPerms.join(\"\\\", \\\"\") + \"\\\"```\", msg.channel, msg.author);\n\n					}\n\n				}\n\n\n\n			}\n\n\n\n\n\n			if (msg.author.bot) {\n\n				return;\n\n			}\n\n\n\n			callbacks.customMessage(msg);\n\n		},\n\n		\n\n		delet: function () {\n\n			\n\n		},\n\n		\n\n		edit: function () {\n\n			\n\n		},\n\n		\n\n		guildMemberAdd: function () {\n\n			\n\n		},\n\n		\n\n		guildMemberRemove: function () {\n\n			\n\n		}\n\n	};\n\n	\n\n	this.bot = function () {\n\n		return bot;\n\n	};\n\n	\n\n	bot.on(\"guildCreate\", function (guild) {\n\n		callbacks.guildCreate(guild);\n\n	});\n\n	\n\n	bot.on(\"ready\", function () {\n\n		callbacks.ready();\n\n	});\n\n	\n\n	bot.on(\"message\", function (msg) {\n\n		callbacks.message(msg);\n\n	});\n\n	\n\n	bot.on(\"messageDelete\", function (msg) {\n\n		callbacks.delet(msg);\n\n	});\n\n	\n\n	bot.on(\"messageDeleteBulk\", function (msgs) {\n\n		var keys = msgs.keyArray(), i, msg;\n\n		for (i = 0; i < keys.length; i += 1) {\n\n			msg = msgs.get(keys[i]);\n\n			callbacks.delet(msg);\n\n		}\n\n	});\n\n	\n\n	bot.on(\"guildMemberAdd\", function (member) {\n\n		callbacks.guildMemberAdd(member);\n\n	});\n\n	\n\n	bot.on(\"guildMemberRemove\", function (member) {\n\n		callbacks.guildMemberRemove(member);\n\n	});\n\n	\n\n	\n\n	this.on = function (str, callback) {\n\n		if (str === \"ready\") {\n\n			callbacks.customReady = callback;\n\n			\n\n			return;\n\n		}\n\n		\n\n		if (str === \"message\") {\n\n			callbacks.customMessage = callback;\n\n			\n\n			return;\n\n		}\n\n		\n\n		if (str === \"delete\") {\n\n			callbacks.delet = callback;\n\n		}\n\n		\n\n		if (str === \"edit\") {\n\n			bot.on(\"messageUpdate\", function (o, n) {\n\n				callback(o, n);\n\n			});\n\n			\n\n			return;\n\n		}\n\n		\n\n		if (str === \"join\") {\n\n			callbacks.guildMemberAdd = callback;\n\n			\n\n			return;\n\n		}\n\n		\n\n		if (str === \"leave\") {\n\n			callbacks.guildMemberRemove = callback;\n\n			\n\n			return;\n\n		}\n\n		\n\n		if (str === \"crash\") {\n\n			callbacks.crash = callback;\n\n			\n\n			return;\n\n		}\n\n		\n\n		if (str === \"crashFail\") {\n\n			callbacks.crashFail = callbacks;\n\n			\n\n			return;\n\n		}\n\n		\n\n		if (str === \"error\") {\n\n			callbacks.error = callback;\n\n			\n\n			return;\n\n		}\n\n		\n\n		bot.on(str, function (a, b, c, d, e, f) {\n\n			callback(a, b, c, d, e, f);\n\n		});\n\n	};\n\n	\n\n	\n\n	bot.authorize = function () {\n\n		auth.msg.status = true;\n\n	};\n\n	\n\n	this.authorize = bot.authorize;\n\n	\n\n	\n\n	\n\n	\n\n	\n\n	this.getUserByID = function (id) {\n\n		return bot.fetchUser(id);\n\n	};\n\n	\n\n	this.setGame = function (game) {\n\n		bot.user.setGame(game);\n\n	};\n\n	\n\n	this.MSG = function (txt, channel, author) {\n\n		bot.authorize();\n\n		\n\n		if (author === undefined) {\n\n			author = \"\";\n\n		} else {\n\n			author += \", \";\n\n		}\n\n		\n\n		return channel.send(author + txt);\n\n	};\n\n	\n\n	bot.MSG = this.MSG;\n\n	\n\n	bot.error = function (error) {\n\n		if (config.webconsole) {\n\n			bot.console.error(error);\n\n		} else {\n\n			console.log(\"X \" + error);\n\n		}\n\n	};\n\n	\n\n	bot.info = function (info) {\n\n		if (config.webconsole) {\n\n			bot.console.info(info);\n\n		} else {\n\n			console.log(\"* \" + info);\n\n		}\n\n	};\n\n	\n\n	bot.warn = function (warn) {\n\n		if (config.webconsole) {\n\n			bot.console.warn(warn);\n\n		} else {\n\n			console.log(\"! \" + warn);\n\n		}\n\n	};\n\n	\n\n	bot.command = function (command) {\n\n		if (config.webconsole) {\n\n			bot.console.command(command);\n\n		} else {\n\n			console.log(\"- \" + command);\n\n		}\n\n	};\n\n	\n\n	bot.fs = {\n\n		read: {\n\n			start: function (file) {\n\n				bot.info(config[\"log.read\"].replace(\"<FILE\", file));\n\n			},\n\n			enoent: function (file) {\n\n				bot.info(config[\"log.read.enoent\"].replace(\"<FILE\", file));\n\n			},\n\n			error: function (file) {\n\n				bot.info(config[\"log.read.error\"].replace(\"<FILE\", file));\n\n			},\n\n			success: function (file) {\n\n				bot.info(config[\"log.read.success\"].replace(\"<FILE\", file));\n\n			}\n\n		},\n\n		write: {\n\n			start: function (file) {\n\n				bot.info(config[\"log.write\"].replace(\"<FILE\", file));\n\n			},\n\n			error: function (file) {\n\n				bot.info(config[\"log.write.error\"].replace(\"<FILE\", file));\n\n			},\n\n			success: function (file) {\n\n				bot.info(config[\"log.write.success\"].replace(\"<FILE\", file));\n\n			}\n\n		},\n\n		check: {\n\n			start: function (file) {\n\n				bot.info(config[\"log.check\"].replace(\"<FILE\", file));\n\n			},\n\n			enoent: function (file) {\n\n				bot.info(config[\"log.check.enoent\"].replace(\"<FILE\", file));\n\n			},\n\n			error: function (file) {\n\n				bot.info(config[\"log.check.error\"].replace(\"<FILE\", file));\n\n			},\n\n			success: function (file) {\n\n				bot.info(config[\"log.check.success\"].replace(\"<FILE\", file));\n\n			}\n\n		}\n\n	};\n\n	\n\n	bot.console = {\n\n		lists: {\n\n			errors: [],\n\n			info: [],\n\n			warnings: [],\n\n			commands: []\n\n		},\n\n		error: function (error) {\n\n			if (io) {\n\n				io.sockets.emit(\"error\", error);\n\n			}\n\n			bot.console.lists.errors.push(error);\n\n		},\n\n		info: function (info) {\n\n			if (io) {\n\n				io.sockets.emit(\"info\", info);\n\n			}\n\n			bot.console.lists.info.push(info);\n\n		},\n\n		warn: function (warning) {\n\n			if (io) {\n\n				io.sockets.emit(\"warn\", warning);\n\n			}\n\n			bot.console.lists.warnings.push(warning);\n\n		},\n\n		command: function (command) {\n\n			if (io) {\n\n				io.sockets.emit(\"command\", command);\n\n			}\n\n			bot.console.lists.commands.push(command);\n\n		}\n\n	};\n\n	\n\n	bot.login(token);\n\n	\n\n	\n\n	// Deprecated functions\n\n	\n\n	this.crash = function () {\n\n		bot.error(\"bot.crash(function () { ... }) is deprecated. Please use bot.on(\\\"crash\\\", function () { ... })\");\n\n	};\n\n	\n\n	this.crashFail = function () {\n\n		bot.error(\"bot.crashFail(function () { ... }) is deprecated. Please use bot.on(\\\"crashFail\\\", function () { ... })\");\n\n	};\n\n	\n\n	this.prefixSuffix = function () {\n\n		bot.error(\"bot.prefixSuffix(PREFIX, SUFFIX) is deprecated. Please put this in the options: prefix: PREFIX, suffix: SUFFIX\");\n\n	};\n\n	\n\n	this.onerror = function (error) {\n\n		bot.error(\"bot.onerror() is deprecated. lease use bot.on(\\\"error\\\", function () { ... })\");\n\n	};\n\n}\n\n\n\nmodule.exports = Bot;";
	
	fs.writeFile("./botDev.js", str, function (err) {
		if (err) {
			console.log(err);
			
			return;
		}
		
		console.log("botDev.js has been installed!");
		
		deleteFile();
	});
}

function install_config() {
	"use strict";
	
	console.log("Installing config.txt...");
	
	var str = "# Bot ownership\n\n\n\n\n\n\n\n# Discord ID of the owner of this bot\n\nowner = \"205910685782245376\"\n\n\n\n\n\n\n\n\n\n\n\n# Command execution\n\n\n\n\n\n\n\n# Bot default prefix\n\ncommands.exe.prefix = \"!\"\n\n\n\n# Bot default suffix\n\ncommands.exe.suffix = \"!\"\n\n\n\n# Make mentions an argument that is a collection of the tagged users\n\ncommands.exe.mention_is_arg = true\n\n\n\n\n\n\n\n\n\n\n\n# Password generation\n\n\n\n\n\n\n\n# Master password bytes\n\npassword.master.bytes = 32\n\n\n\n# Final password length\n\npassword.final.length = 128\n\n\n\n# Password hashing algorithm\n\npassowrd.hash = \"sha512\"\n\n\n\n# Password encoding\n\npassword.encoding = \"hex\"\n\n\n\n\n\n\n\n\n\n\n\n# Backup info\n\n\n\n\n\n\n\n# Interval (in milliseconds) in which the bot backs up its files.\n\nbackup.interval = 300000\n\n\n\n# Message bot sends before a backup\n\nbackup.msg.start = \"Backing up files...\"\n\n\n\n# Message bot sends before backing up a file\n\nbackup.msg.read = \"Backing up file <FILE>...\"\n\n\n\n# Message bot sends when reading a file fails\n\nbackup.msg.read.error = \"Unable to read file <FILE>.\"\n\n\n\n# Message bot sends before writing a file\n\nbackup.msg.write = \"Writing backup file for <FILE>...\"\n\n\n\n# Message bot sends when writing a backup fails\n\nbackup.msg.write.error = \"Unable to backup file <FILE>.\"\n\n\n\n# Message bot sends once backup is completed\n\nbackup.msg.end = \"Backup complete! <PERCENT>% of files were successfully backed up\"\n\n\n\n\n\n\n\n\n\n# Web Console\n\n\n\n\n\n\n\n# Whether or not to use the web console\n\nwebconsole = true\n\n\n\n# Default port. Set this to -1 to generate a port\n\nwebconsole.port = -1\n\n\n\n# Number to add to characters in port generation hash\n\nwebconsole.port.hash.add = 829\n\n\n\n# Minimum port number\n\nwebconsole.port.min = 1000\n\n\n\n# Maximum port number\n\nwebconsole.port.max = 8759\n\n\n\n\n\n\n\n\n\n\n\n# Commands\n\n\n\n\n\n\n\n# If default \"help\" command should be added\n\ncommands.help = true\n\n\n\n# Custom name of default \"help\" command\n\ncommands.help.name = \"help\"\n\n\n\n# Whether the bot should send the help page in DMs or in the channel. Set 0 to DMs, 1 for the channel the command was requested in\n\ncommands.help.channel = 1\n\n\n\n# Message to send to user once help is sent in DMs.\n\ncommands.help.channel.msg = \"<USER>, help has been sent!\"\n\n\n\n# Whether or not the bot should use an embed for the help page\n\ncommands.help.embed = false\n\n\n\n# Color for help embed\n\ncommands.help.embed.color = \"#02c5d8\"\n\n\n\n# Whether or not to specify an author for help embed\n\ncommands.help.embed.author = true\n\n\n\n# Author for help embed\n\ncommands.help.embed.author.author = \"<BOT NAME>\"\n\n\n\n# Whether or not to use an icon for help embed\n\ncommands.help.embed.author.icon = true\n\n\n\n# Author icon for help embed\n\ncommands.help.embed.author.icon.icon = \"<BOT PROFILE PICTURE>\"\n\n\n\n# Whether or not to use a title for help embed\n\ncommands.help.embed.title = true\n\n\n\n# Title for help embed\n\ncommands.help.embed.title.title = \"Help Page\"\n\n\n\n# Whether or not to use a URL for help embed\n\ncommands.help.embed.url = false\n\n\n\n# URL for help embed\n\ncommands.help.embed.url.url = \"\"\n\n\n\n# Whether or not to add a timestamp for help embed\n\ncommands.help.embed.timestamp = true\n\n\n\n# Whether or not to add a footer for help embed\n\ncommands.help.embed.footer = true\n\n\n\n# Footer text for help embed\n\ncommands.help.embed.footer.text = \"<BOT NAME>\"\n\n\n\n# Whether or not to use a footer icon for help embed\n\ncommands.help.embed.footer.icon = true\n\n\n\n# Footer icon for help embed\n\ncommands.help.embed.footer.icon.icon = \"<BOT PROFILE PICTURE>\"\n\n\n\n# Format for multiple commands\n\ncommands.help.format.multiple = \"<PREFIX><COMMAND><SUFFIX> : <PURPOSE>\\n\\tUsage: <COMMAND> <HELP>\\n\\tPermissions: ``<PERMS>``\"\n\n\n\n# What to separate multiple commands in help page with\n\ncommands.help.join = \"\\n\\n\"\n\n\n\n# Format for one command\n\ncommands.help.format.single = \"<PREFIX><COMMAND><SUFFIX> : <PURPOSE>\\n\\tUsage: <COMMAND> <HELP>\\n\\tPermissions: ``<PERMS>``\"\n\n\n\n\n\n\n\n# If default \"ping\" command should be added\n\ncommands.ping = true\n\n\n\n# Custom name of default \"ping\" command\n\ncommands.ping.name = \"ping\"\n\n\n\n# If \"ping\" command should use the Client.ping property, contrary to measuring the time it took to send \"pong\"\n\ncommands.ping.client_ping = false\n\n\n\n# Amount of allowed decimal places in ping\n\ncommands.ping.decimals = 2\n\n\n\n\n\n\n\n# If default \"kill\" command should be added\n\ncommands.kill = true\n\n\n\n# Custom name of default \"kill\" command\n\ncommands.kill.name = \"kill\"\n\n\n\n# Whether or not a password should be required\n\ncommands.kill.password = true\n\n\n\n\n\n\n\n# If default \"account\" command should be added\n\ncommands.account = true\n\n\n\n# Custom name of default \"account\" command\n\ncommands.account.name = \"account\"\n\n\n\n\n\n\n\n# If default \"perms\" command should be added\n\ncommands.perms = true\n\n\n\n# Custom name of default \"perms\" command\n\ncommands.perms.name = \"perms\"\n\n\n\n\n\n\n\n\n\n\n\n# Server info\n\n\n\n\n\n\n\n# What to display when the bot is added to a server\n\nserver.bot_join = \"<OWNER>, I have been added to this server!\"\n\n\n\n\n\n\n\n\n\n\n\n# Data to store about servers\n\n\n\n\n\n\n\n# Whether or not to store avatar IDs\n\nstorage.users.avatar = true\n\n\n\n# Whether or not to store avatar urls\n\nstorage.users.avatar.url = false\n\n\n\n# Whether or not to store usernames\n\nstorage.users.username = true\n\n\n\n# Whether or not to store discriminators\n\nstorage.users.disc = true\n\n\n\n# Whether or not to store whether or not the user is a bot\n\nstorage.users.bot = true\n\n\n\n# Whether or not to store uptime\n\nstorage.users.uptime = true\n\n\n\n# Whether or not to store user status\n\nstorage.users.status = false\n\n\n\n\n\n\n\n\n\n\n\n# Console logs for file system\n\n\n\n\n\n\n\n# Message to send when checking for existance of a file\n\nlog.check = \"Checking for <FILE>...\"\n\n\n\n# Message to send if file doesn't exist\n\nlog.check.enoent = \"Unable to find <FILE>\"\n\n\n\n# Message to send if unable to check for the existance of a file\n\nlog.check.error = \"Unable to check for <FILE>\"\n\n\n\n# Message to send if able to find file\n\nlog.check.success = \"Found <FILE>\"\n\n\n\n\n\n\n\n# Message to send if reading file\n\nlog.read = \"Reading <FILE>...\"\n\n\n\n# Message to send if file doesn't exist\n\nlog.read.enoent = \"Unable to find <FILE>\"\n\n\n\n# Message to send if unable to read file\n\nlog.read.error = \"Unable to read <FILE>\"\n\n\n\n# Message to send if reading of the file was successful\n\nlog.read.success = \"Successfully read <FILE>\"\n\n\n\n\n\n\n\n# Message to send if writing file\n\nlog.write = \"Writing <FILE>...\"\n\n\n\n# Message to send if unable to write file\n\nlog.write.error = \"Unable to write <FILE>\"\n\n\n\n# Message to send if writing of the file was successful\n\nlog.write.success = \"Successfully wrote <FILE>\"";
	
	fs.writeFile("./config.txt", str, function (err) {
		if (err) {
			console.log(err);
			
			return;
		}
		
		console.log("config.txt has been installed!");
		
		install_botDev();
	});
}

function install_console() {
	"use strict";
	
	console.log("Installing console.html...");
	
	var str = "<!DOCTYPE html><title id=title></title><link id=icon rel=icon><body><script src=/socket.io/socket.io.js></script><div id=console><div id=options><div id=errorsOption onclick=toggle(this) style=color:red>Errors</div><div id=infoOption onclick=toggle(this) style=color:green>Info</div><div id=warningsOption onclick=toggle(this) style=color:orange>Warnings</div><div id=commandsOption onclick=toggle(this) style=color:#00f>Commands</div></div><div id=general><table><tr><td>Bot<td><button id=please onclick=stop(this)>Stop</button><tr><td>Avatar<td id=avatar><tr><td>Name<td id=name><tr><td>Discord ID<td id=id><tr><td>Connected Users<td id=users><tr><td>Ping<td id=ping><tr><td>Token<td id=token><tr><td>Uptime<td id=uptime><tr><td>Game<td id=game><tr><td>Status<td id=status></table></div><div id=errors></div><div id=info></div><div id=warnings></div><div id=commands></div></div><style>body{font-family:Arial,Helvetica,sans-serif}#console{position:absolute;top:0;left:0;width:100%;height:100%}#console #general,#console #options{overflow-y:auto}#console #options{position:absolute;top:0;left:0;height:100%;width:calc(25% - 1px);border-right:1px solid #000}#console #options div{position:relative;width:calc(100% - 20px);padding:10px;cursor:pointer;border-bottom:1px solid #000;background-color:#fff;font-weight:700;transition:background-color 1s}#console #options div.show{background-color:#d7d7d7;transition:background-color 1s}#console #general{position:absolute;top:0;right:0;height:100%;width:calc(75% - 1px);z-index:1;border-left:1px solid #000}table{font-family:arial,sans-serif;border-collapse:collapse;width:100%}td,th{text-align:left;padding:20px}tr:nth-child(even){background-color:#d7d7d7}button{text-align:center;background-color:#54a8f8;padding-left:37.5px;padding-right:37.5px;padding-top:10px;padding-bottom:10px;border-radius:10px;border:2px solid #54a8f8;transition:background-color 1s;cursor:pointer}button.barrier{background-color:#fff;transition:background-color 1s}#commands,#errors,#info,#warnings{opacity:0;word-wrap:break-word;position:absolute;top:0;right:0;height:calc(100% - 20px);width:calc(75% - 21px);border-left:1px solid #000;background-color:#fff;padding:10px;z-index:0;transition:opacity 1s,z-index 0s 1s;overflow:auto}#commands.show,#errors.show,#info.show,#warnings.show{opacity:1;z-index:1000;transition:opacity 1s}</style><script>function stop(e){\"barrier\"!==e.className&&(e.className=\"barrier\",socket.emit(\"stop\",\"stop\"))}function toggle(e){var n=e.innerHTML.split(\" \")[0].toLowerCase();\"errors\"!==n&&(document.getElementById(\"errors\").className=\"\",document.getElementById(\"errorsOption\").className=\"\",document.getElementById(\"errors\").innerHTML=\"\"),\"info\"!==n&&(document.getElementById(\"info\").className=\"\",document.getElementById(\"infoOption\").className=\"\",document.getElementById(\"info\").innerHTML=\"\"),\"warnings\"!==n&&(document.getElementById(\"warnings\").className=\"\",document.getElementById(\"warningsOption\").className=\"\",document.getElementById(\"warnings\").innerHTML=\"\"),\"commands\"!==n&&(document.getElementById(\"commands\").className=\"\",document.getElementById(\"commandsOption\").className=\"\",document.getElementById(\"commands\").innerHTML=\"\"),\"show\"===document.getElementById(n).className?(document.getElementById(n).className=\"\",document.getElementById(n).innerHTML=\"\",document.getElementById(n+\"Option\").className=\"\"):(document.getElementById(n).className=\"show\",document.getElementById(n+\"Option\").className=\"show\",document.getElementById(n).innerHTML=\"<span>\"+LIST[n].join(\"</span><br /><span>\")+\"</span>\")}var socket=io.connect(window.location.href.split(\"/\")[2]),ERRORS=document.getElementById(\"errorsList\"),INFO=document.getElementById(\"infoList\"),WARNINGS=document.getElementById(\"warningsList\"),COMMANDS=document.getElementById(\"commandsList\");socket.on(\"title\",function(e){document.getElementById(\"title\").innerHTML=e}),socket.on(\"icon\",function(e){document.getElementById(\"icon\").href=e,document.getElementById(\"icon\").type=\"image/jpg\"}),socket.on(\"data\",function(e){document.getElementById(\"please\").className=\"\";var n,t=Object.keys(e);for(n=0;n<t.length;n+=1)document.getElementById(t[n]).innerHTML=e[t[n]];setTimeout(function(){socket.emit(\"beep\",\"beep\")},1e3)}),socket.on(\"boop\",function(e){var n,t=Object.keys(e);for(n=0;n<t.length;n+=1)document.getElementById(t[n]).innerHTML=e[t[n]];setTimeout(function(){socket.emit(\"beep\",\"beep\")},1e3)});var LIST={};socket.on(\"list\",function(e){LIST=e,document.getElementById(\"errorsOption\").innerHTML=\"Errors (\"+LIST.errors.length+\")\",document.getElementById(\"infoOption\").innerHTML=\"Info (\"+LIST.info.length+\")\",document.getElementById(\"warningsOption\").innerHTML=\"Warnings (\"+LIST.warnings.length+\")\",document.getElementById(\"commandsOption\").innerHTML=\"Commands (\"+LIST.commands.length+\")\"})</script>";
	
	fs.writeFile("./console.html", str, function (err) {
		if (err) {
			console.log(err);
			
			return;
		}
		
		console.log("console.html has been installed!");
		
		install_config();
	});
}

function install_discordJS() {
	"use strict";
	
	console.log("Looking for /node_modules/discord.js/ ...");
	
	try {
		var stat = fs.statSync("./node_modules/discord.js/");
		
		console.log("Found /node_modules/discord.js/ .");
		
		install_console();
	} catch (err) {
		if (err && err.code === "ENOENT") {
			console.log("Installing discord.js...  (this may take a while)");
			
			exec("npm install discord.js", function (err, stdout, stderr) {

				if (err) {
					console.log(err);
					
					process.exit(0);
				}

				if (stdout) {
					console.log("discord.js has been installed!");
					
					install_console();
				}
				
				if (stderr) {
					console.log(stderr);
				}
			});
		} else if (err) {
			console.log("Unable to check for /node_modules/discord.js/. Try again");

			process.exit(0);
		}
	}
}

function install_socketIO() {
	"use strict";
	
	console.log("Looking for /node_modules/socket.io/ ...");
	
	try {
		var stat = fs.statSync("./node_modules/socket.io/");
		
		console.log("Found /node_modules/socket.io/ .");
		
		install_discordJS();
	} catch (err) {
		if (err && err.code === "ENOENT") {
			console.log("Installing socket.io...  (this may take a while)");
			
			exec("npm install socket.io", function (err, stdout, stderr) {

				if (err) {
					console.log(err);
					
					process.exit(0);
				}

				if (stdout) {
					console.log("socket.io has been installed!");
					
					install_discordJS();
				}
				
				if (stderr) {
					console.log(stderr);
				}
			});
		} else if (err) {
			console.log("Unable to check for /node_modules/socket.io/. Try again");

			process.exit(0);
		}
	}
}

function install_express() {
	"use strict";
	
	console.log("Looking for /node_modules/express/ ...");
	
	try {
		var stat = fs.statSync("./node_modules/express/");
		
		console.log("Found /node_modules/express/ .");
		
		install_socketIO();
	} catch (err) {
		if (err && err.code === "ENOENT") {
			console.log("Installing express... (this may take a while)");
			
			exec("npm install express", function (err, stdout, stderr) {

				if (err) {
					console.log(err);
					
					process.exit(0);
				}

				if (stdout) {
					console.log("express has been installed!");
					
					install_socketIO();
				}
				
				if (stderr) {
					console.log(stderr);
				}
			});
		} else if (err) {
			console.log("Unable to check for /node_modules/express/. Try again");

			process.exit(0);
		}
	}
}

console.log("Thank you for using botDev.js <3 - Henry");

install_express();